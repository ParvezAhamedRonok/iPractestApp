// Full React Native version of the above component using react-native-reanimated-carousel

import React, { useEffect, useState } from 'react';
import { View, Text, Alert, ScrollView, Dimensions, TouchableOpacity, Modal } from 'react-native';
import AsyncStorage from '@react-native-async-storage/async-storage';
import { useNavigation } from '@react-navigation/native';
import Carousel from 'react-native-reanimated-carousel';
import { useStateContext } from '../../../contexts/ContextProvider';

import Card_1 from "../_Data/_CardsDetails/_card1"
import Card_2 from "../_Data/_CardsDetails/_card2"
import Card_3 from "../_Data/_CardsDetails/_card3"
import Card_4 from "../_Data/_CardsDetails/_card4"
import Card_5 from "../_Data/_CardsDetails/_card5"
import {
    AAMARPAY_GET_USER_DATA_FROM_DATABASE,
    PAYPAL_GET_USER_DATA_FROM_DATABASE,
    SSL_COMMERZ_GET_USER_DATA_FROM_DATABASE
} from '@/assets/URL\'s/AllUrl';
// import SSLCommerzPage from './SSLCommerzPage';
// import PaypalCheckoutPage from './PaypalCheckoutPage';
// import { CheckoutButton } from './StripeCheckout';



const { width: screenWidth } = Dimensions.get('window');

let store_payMethod = '';

const TestimonialSlider = () => {
    const navigation = useNavigation();
    const [userEmail, setUserEmail] = useState('');
    const [userCountry, setUserCountry] = useState('');
    const [showPaypalPopup, setShowPaypalPopup] = useState(false);
    const [showSSLCommerz, setShowSSLCommerz] = useState(false);
    const [productName, setProductName] = useState('');
    const [makingAmount, setMakingAmount] = useState('');
    const { userPaymentStatusCheck, OpenClose_LogSign_Popup, setOpenClose_LogSign_Popup, registerFunction } = useStateContext();

    useEffect(() => {
        const fetchData = async () => {
            const email = await AsyncStorage.getItem('userEmail');
            const country = await AsyncStorage.getItem('setCountry');
            setUserEmail(email || '');
            setUserCountry(country || '');
        };
        fetchData();
    }, []);

    //login and signup pages opne and close globally..
    const toggleLogin = () => {
        //store function globally for run after complete login / signUp because this will be same page redirecting 
        registerFunction(updateUserFreeAccess);
        //open the login Pages
        setOpenClose_LogSign_Popup("same_Login")

    };


    const updateUserFreeAccess = async () => {
        const email = await AsyncStorage.getItem('userEmail');
        const token = await AsyncStorage.getItem('loginTOken');
        const paymentCheckEndpoints = [
            SSL_COMMERZ_GET_USER_DATA_FROM_DATABASE,
            AAMARPAY_GET_USER_DATA_FROM_DATABASE,
            PAYPAL_GET_USER_DATA_FROM_DATABASE,
        ];

        let isPaid = false;
        let paidProductName = '';

        for (const endpoint of paymentCheckEndpoints) {
            try {
                const response = await fetch(`${endpoint}${email}`, {
                    headers: {
                        Authorization: `Bearer ${token}`,
                    },
                });
                const res = await response.json();
                if (res?.data?.some(e => !e.isExpire)) {
                    isPaid = true;
                    paidProductName = res.data[0].productName;
                    break;
                }
            } catch (e) {
                console.error(e);
            }
        }

        if (isPaid) {
            Alert.alert('Success', `You already paid for ${paidProductName}`);
            navigation.navigate('Home');
        } else {
            if (userCountry === 'Bangladesh') setShowSSLCommerz(true);
            else {
                if (store_payMethod === 'Paypal') setShowPaypalPopup(true);
                // else CheckoutButton(productName, false);
            }
        }
    };

    const passDataFunc = (Pname, amount, method) => {
        setProductName(Pname);
        setMakingAmount(amount);
        AsyncStorage.getItem('loginTOken').then(token => {
            if (token) {
                if (userCountry === 'Bangladesh') setShowSSLCommerz(true);
                else if (method === 'Paypal') setShowPaypalPopup(true);
                // else CheckoutButton(Pname, userPaymentStatusCheck);
            } else {
                store_payMethod = method;
                toggleLogin();
            }
        }).catch(() => {
            store_payMethod = method;
            toggleLogin();
        });
    };

    const cards = [
        { component: Card_1, condition: !userPaymentStatusCheck },
        { component: Card_2, condition: ['', 'Starter'].includes(userPaymentStatusCheck) },
        { component: Card_3, condition: userCountry === 'Bangladesh' },
        { component: Card_4, condition: userCountry === 'Bangladesh' },
        { component: Card_5, condition: userCountry === 'Bangladesh' },
    ].filter(c => c.condition);

    return (
        <ScrollView contentContainerStyle={{ padding: 20, backgroundColor: 'white' }}>
            <Text style={{ textAlign: 'center', fontSize: 24, fontWeight: 'bold', marginVertical: 20 }}>
                Get Your Package Now
            </Text>
            <Text style={{ textAlign: 'center', fontSize: 12, marginBottom: 10 }}>
                Unlock premium access and enjoy our modules with a simple step-by-step guide.
            </Text>

            <Carousel
                width={screenWidth * 0.9}
                height={900}
                data={cards}
                style={{ alignSelf: 'center' }}
                renderItem={({ item }) => (
                    <item.component userCountry={userCountry} passDataFunc={passDataFunc} />
                )}
                loop
                autoPlay
                autoPlayInterval={10000}
                scrollAnimationDuration={1000}
            />

            {/* <Modal visible={showSSLCommerz} animationType="slide">
        <SSLCommerzPage
          setAmerPayPayment={setShowSSLCommerz}
          productName={productName}
          makingAmount={makingAmount}
        />
      </Modal> */}

            {/* <Modal visible={showPaypalPopup} transparent animationType="slide">
        <View style={{ flex: 1, justifyContent: 'center', alignItems: 'center', backgroundColor: 'rgba(0,0,0,0.5)' }}>
          <View style={{ backgroundColor: 'white', padding: 20, borderRadius: 10, width: '80%' }}>
            <TouchableOpacity onPress={() => setShowPaypalPopup(false)}>
              <Text style={{ textAlign: 'right', color: 'red' }}>Close</Text>
            </TouchableOpacity>
            <PaypalCheckoutPage productName={productName} />
          </View>
        </View>
      </Modal> */}
        </ScrollView>
    );
};

export default TestimonialSlider;
